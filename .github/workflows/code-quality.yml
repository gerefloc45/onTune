name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Check code formatting with Prettier
      run: |
        echo "üé® Checking code formatting..."
        npm run format:check
    
    - name: Run ESLint
      run: |
        echo "üîç Running ESLint..."
        npm run lint
    
    - name: Check for unused dependencies
      run: |
        echo "üì¶ Checking for unused dependencies..."
        npx depcheck --ignores="@types/*,eslint-*,prettier,husky,commitlint,jest-*"
    
    - name: Check package.json format
      run: |
        echo "üìã Checking package.json format..."
        npx prettier --check package.json
    
    - name: Validate package.json
      run: |
        echo "‚úÖ Validating package.json..."
        npm ls --depth=0

  commitlint:
    name: Commit Message Lint
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Validate commit messages
      run: |
        echo "üí¨ Validating commit messages..."
        npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: |
        echo "üîí Running security audit..."
        npm audit --audit-level=moderate
    
    - name: Check for known vulnerabilities
      run: |
        echo "üõ°Ô∏è Checking for known vulnerabilities..."
        npx audit-ci --moderate

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: moderate
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC

  code-analysis:
    name: Code Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests with coverage
      run: |
        echo "üß™ Running tests with coverage..."
        npm run test:coverage
      env:
        NODE_ENV: test
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      continue-on-error: true

  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run performance tests
      run: |
        echo "‚ö° Running performance tests..."
        npm run test:performance
      env:
        NODE_ENV: test
    
    - name: Check bundle size
      run: |
        echo "üì¶ Checking bundle size..."
        npm run build 2>/dev/null || echo "No build script found, skipping bundle size check"
    
    - name: Memory usage check
      run: |
        echo "üß† Checking memory usage..."
        npm run test:memory
      env:
        NODE_ENV: test

  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check README.md
      run: |
        echo "üìö Checking README.md..."
        if [ ! -f README.md ]; then
          echo "‚ùå README.md not found!"
          exit 1
        fi
        
        # Check if README has minimum content
        if [ $(wc -l < README.md) -lt 10 ]; then
          echo "‚ö†Ô∏è README.md seems too short (less than 10 lines)"
        fi
    
    - name: Check for TODO/FIXME comments
      run: |
        echo "üîç Checking for TODO/FIXME comments..."
        TODO_COUNT=$(grep -r "TODO\|FIXME\|XXX\|HACK" src/ --include="*.js" | wc -l || echo "0")
        if [ $TODO_COUNT -gt 0 ]; then
          echo "‚ö†Ô∏è Found $TODO_COUNT TODO/FIXME comments:"
          grep -r "TODO\|FIXME\|XXX\|HACK" src/ --include="*.js" || true
        else
          echo "‚úÖ No TODO/FIXME comments found"
        fi
    
    - name: Check JSDoc coverage
      run: |
        echo "üìù Checking JSDoc coverage..."
        # This is a simple check - in a real project you might use a tool like jsdoc-coverage
        FUNCTIONS_WITHOUT_DOCS=$(grep -r "function\|=>" src/ --include="*.js" | grep -v "//\|/\*" | wc -l || echo "0")
        echo "Functions potentially without documentation: $FUNCTIONS_WITHOUT_DOCS"

  file-structure-check:
    name: File Structure Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check required files
      run: |
        echo "üìÅ Checking required files..."
        
        REQUIRED_FILES=(
          "package.json"
          "README.md"
          ".gitignore"
          ".eslintrc.js"
          ".prettierrc.js"
          "jest.config.js"
          ".commitlintrc.js"
        )
        
        MISSING_FILES=()
        
        for file in "${REQUIRED_FILES[@]}"; do
          if [ ! -f "$file" ]; then
            MISSING_FILES+=("$file")
          fi
        done
        
        if [ ${#MISSING_FILES[@]} -gt 0 ]; then
          echo "‚ùå Missing required files:"
          printf '%s\n' "${MISSING_FILES[@]}"
          exit 1
        else
          echo "‚úÖ All required files present"
        fi
    
    - name: Check directory structure
      run: |
        echo "üèóÔ∏è Checking directory structure..."
        
        REQUIRED_DIRS=(
          "src"
          "tests"
          ".github/workflows"
          ".husky"
        )
        
        MISSING_DIRS=()
        
        for dir in "${REQUIRED_DIRS[@]}"; do
          if [ ! -d "$dir" ]; then
            MISSING_DIRS+=("$dir")
          fi
        done
        
        if [ ${#MISSING_DIRS[@]} -gt 0 ]; then
          echo "‚ùå Missing required directories:"
          printf '%s\n' "${MISSING_DIRS[@]}"
          exit 1
        else
          echo "‚úÖ All required directories present"
        fi
    
    - name: Check for large files
      run: |
        echo "üìè Checking for large files..."
        LARGE_FILES=$(find . -type f -size +10M -not -path "./node_modules/*" -not -path "./.git/*" || true)
        
        if [ -n "$LARGE_FILES" ]; then
          echo "‚ö†Ô∏è Found large files (>10MB):"
          echo "$LARGE_FILES"
          echo "Consider using Git LFS for large files"
        else
          echo "‚úÖ No large files found"
        fi

  final-status:
    name: Final Status
    runs-on: ubuntu-latest
    needs: [lint-and-format, security-audit, code-analysis, performance-check, documentation-check, file-structure-check]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        echo "üìä Final Status Report:"
        echo "Lint and Format: ${{ needs.lint-and-format.result }}"
        echo "Security Audit: ${{ needs.security-audit.result }}"
        echo "Code Analysis: ${{ needs.code-analysis.result }}"
        echo "Performance Check: ${{ needs.performance-check.result }}"
        echo "Documentation Check: ${{ needs.documentation-check.result }}"
        echo "File Structure Check: ${{ needs.file-structure-check.result }}"
        
        if [[ "${{ needs.lint-and-format.result }}" == "failure" || 
              "${{ needs.security-audit.result }}" == "failure" || 
              "${{ needs.code-analysis.result }}" == "failure" || 
              "${{ needs.performance-check.result }}" == "failure" || 
              "${{ needs.documentation-check.result }}" == "failure" || 
              "${{ needs.file-structure-check.result }}" == "failure" ]]; then
          echo "‚ùå Some quality checks failed!"
          exit 1
        else
          echo "‚úÖ All quality checks passed!"
        fi